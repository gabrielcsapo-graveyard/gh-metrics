#!/usr/bin/env node

const Program = require('commander');

const Metrics = require('../index.js');

Program
    .version(require('../package.json').version)
    .option('-u, --user [user]', 'the name of the user that you want to get metrics for.')
    .option('-t, --token [token]', 'github access token to make requests.')
    .option('-k, --keys [keys]', 'keys to be passed to make the table based on the comma seperated keys you provide.')
    .option('-s, --sort [sort]', 'key to be used to sort against the returned value')
    .option('-a, --asc', 'by default the sorting is descending if this is selected it will be ascending')
    .option('-p, --page [page]', 'the page to start the search at, by default the limit is only 100, so pagination is necessary')
    .option('-l, --limit [limit]', 'limit the number of repos that are being returned')
    .option('--table', 'output a table of the data')
    .option('-gp, --github-protocol [protocol]', 'the protocol to query github')
    .option('-gh, --github-host [url]', 'the url of the github instance to query')
    .option('-gd, --github-debug', 'a flag that allows debug logs from the github client')
    .parse(process.argv);

if (Program.user) {
    Program.keys = Program.keys && Program.keys.split(',').map((k) => {
        return k.trim();
    }) || ['full_name', 'homepage', 'description', 'created_at', 'size'];
    Metrics({
        user: Program.user,
        token: Program.token,
        keys: Program.keys,
        sort: Program.sort,
        sortAsc: Program.asc ? true : false,
        table: Program.table,
        limit: Program.limit,
        page: Program.page,
        github: {
          protocol: Program.githubProtocol || 'https',
          host: Program.githubHost || 'api.github.com',
          debug: Program.githubDebug ? true : false
        }
    }, function(err, metrics) {
        if(err) {
            return console.error(err);
        }
        console.log(metrics);
    });
} else {
    console.error('please specify a user\n');
}
